GlobalPlatform Card Specification (v2.3.1) — Presentation Script
Audience: Engineers, Developers, Architects
Duration: ~45 minutes
Objective: Explain GlobalPlatform’s architecture, security, and lifecycle with practical clarity.

--------------------------------------------------
Opening (2–3 min)

“Good morning everyone.
Today, we’ll walk through the key parts of the GlobalPlatform Card Specification v2.3.1,
focusing on the system architecture, card internals, security framework, and how all these come together through lifecycle management and APDU flows.

If you’ve ever worked with Java Card, Secure Elements, or eSIMs — you’ve touched parts of this ecosystem.
GlobalPlatform defines how we securely manage content on those cards — from installation and privilege control to secure communication.”

--------------------------------------------------
Chapter 2 — System Architecture (8 min)

“Let’s start with the system architecture — the big picture.

Think of GlobalPlatform as a secure multi-tenant system for smart cards.
You have multiple stakeholders:
- The Card Issuer, who owns the physical card and the root Security Domain.
- The Application Providers, who bring in applications — these could be payment, ID, or mobile apps.
- And the Controlling Authority, who oversees privileges and ensures that one provider doesn’t overstep into another’s territory.

All interactions between these entities and the card happen through APDUs, the command and response messages defined by ISO/IEC 7816-4.

Each of those messages is secured by a Secure Channel Protocol — SCP02, SCP03, or SCP11.
The most common one today is SCP03, which uses AES keys to authenticate and encrypt every command.

So even though you’re sending what looks like a simple hex command — underneath, it’s cryptographically verified and securely wrapped.”

“The architecture defines clear roles:
- The Issuer sets up the trust and lifecycle.
- The Application Provider manages their own applications within assigned privileges.
- The Controlling Authority manages cross-domain rules.

This separation of responsibility is what makes multi-application cards possible — and safe.”

--------------------------------------------------
Chapter 3 — Card Architecture (8 min)

“Now, inside the card — the architecture mirrors those relationships.

At the core, we have Security Domains, or SDs.
The Issuer Security Domain — the ISD — sits at the top.
It can create or delete other SDs, which belong to application providers.
Each SD has its own keys, privileges, and sometimes its own Secure Channel.

The OPEN environment acts as the operating system.
It dispatches APDU commands, enforces privileges, and manages logical channels.

When an APDU arrives, OPEN reads the header — looks at the CLA byte — and decides whether it’s meant for the Card Manager, a Security Domain, or an application instance.

Applications themselves are structured into:
- Executable Load Files (the bytecode containers)
- Modules (logical units within those files)
- and Application Instances (the actual running applets, identified by AIDs).

Every app runs in a trusted framework — it’s verified before installation using a DAP signature from the Application Provider.
The card checks that signature against a stored public key to ensure integrity.

In short: Security Domains are the administrators, OPEN is the dispatcher, and applications are the tenants — each carefully isolated and verified.”

--------------------------------------------------
Chapter 4 — Security Architecture (8 min)

“Everything we just talked about relies on the security architecture.

The goal here is simple but critical: confidentiality, integrity, and authenticity — from manufacturing to termination.

Let’s break down who’s responsible for what:
- The Issuer handles card initialization, key provisioning, and lifecycle control.
- The Application Provider signs load files to ensure integrity.
- The Controlling Authority governs privilege tokens.

Together, these layers make sure that only trusted entities can load, install, or remove anything from the card.

The card itself enforces this using Secure Channel Protocols — SCP03 being the default.
In SCP03, both sides derive temporary session keys from static issuer keys.
These session keys are used for encryption, command MACs, and key wrapping.

Picture it like this:
You start with your issuer keys — K-ENC, K-MAC, K-DEK — and from those, derive S-ENC, S-MAC, and DEK session keys.
Each session is unique, ensuring no replay or key reuse.

Once that channel is open, all commands — LOAD, INSTALL, DELETE — are verified and protected end-to-end.”

--------------------------------------------------
Chapter 5 — Lifecycle Models (8 min)

“Every GlobalPlatform component — the card, the load files, the apps, and the Security Domains — has its own lifecycle.

The card lifecycle starts at OP_READY (fresh from manufacturing), then goes through INITIALIZED, SECURED, and finally TERMINATED.
Only the Issuer can transition between those states.

The application lifecycle runs from INSTALLED to SELECTABLE, LOCKED, and DELETED.
Similarly, a Security Domain can move from PERSONALIZED to INITIALIZED, LOCKED, and TERMINATED.

These lifecycles ensure no action happens in the wrong state — for example, you can’t load an app if the card isn’t secured, and you can’t delete an app unless you have the privilege and the SD is active.

In practice, lifecycle transitions are triggered by specific APDUs — like SET STATUS, INSTALL, or DELETE.

Together, these states and transitions give the card a predictable and secure operational model.”

--------------------------------------------------
Chapter 6 — The GlobalPlatform Environment (OPEN) (8 min)

“OPEN is the runtime brain of the card.

It’s always active — always listening — and it manages everything from logical channels to command routing.

When you send an APDU, OPEN reads the CLA byte and decides which context to forward it to.
Channel 0, by default, always maps to the Card Manager, and the other channels can be dynamically assigned to applications.

It also enforces privileges.
Before any command executes, OPEN checks the Registry to see if the sender has the right privileges — like Global Delete, DAP Verification, or Delegated Management.

If the privilege isn’t there, the card simply rejects the command with a 6985 error — conditions not satisfied.

The GlobalPlatform Registry keeps track of everything: AIDs, states, and who owns what.

Finally, the Trusted Framework ensures that only validated apps run — every load and install operation passes through OPEN for cryptographic verification and policy enforcement.”

--------------------------------------------------
Appendix A — APDU Flow Examples (6 min)

“Now let’s make this real.
Here’s what a secure channel establishment actually looks like on the wire.

The terminal sends INITIALIZE UPDATE with a random host challenge.
The card replies with a cryptogram and sequence counter.
The terminal derives session keys and replies with EXTERNAL AUTHENTICATE.
If the cryptogram checks out — boom — you’re inside a secure session.

From there, you can send your LOAD, INSTALL, and STORE DATA commands safely.
Every byte of data is encrypted and MACed using your session keys.

The key takeaway here is that GlobalPlatform doesn’t redefine the command structure — it secures and governs it.
It builds rules, roles, and trust layers around ISO7816 APDUs.”

--------------------------------------------------
Closing & Recap (3–4 min)

“To wrap up —
GlobalPlatform defines not just a communication protocol, but a trust ecosystem:
- The System Architecture defines the roles and boundaries.
- The Card Architecture defines how those roles live on the card.
- The Security Architecture ensures cryptographic integrity and authenticity.
- The Lifecycle Models provide controlled evolution from manufacturing to deactivation.
- The OPEN Environment enforces all of that dynamically during runtime.

And through APDU flows, we see how all of this becomes real — every operation is traceable, authenticated, and secure.

The next time you tap your card, authenticate with your phone, or use a SIM — you’re relying on GlobalPlatform’s invisible framework making sure everything runs securely.

Thank you.”
